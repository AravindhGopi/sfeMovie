#include "ConditionImpl.h"#include <iostream>ConditionImpl::ConditionImpl(int& var) :m_conditionnedVar(var),m_cond(),m_mutex(){	if (0 != pthread_cond_init(&m_cond, NULL))	{		std::cerr << "pthread_cond_init() error\n";	}		if (0 != pthread_mutex_init(&m_mutex, NULL))	{		std::cerr << "pthread_mutex_init() error\n";	}}ConditionImpl::~ConditionImpl(void){	if (0 != pthread_mutex_destroy(&m_mutex))	{		std::cerr << "pthread_cond_destroy() error\n";	}		if (0 != pthread_cond_destroy(&m_cond))	{		std::cerr << "pthread_cond_destroy() error\n";	}}void ConditionImpl::waitAndRetain(int value){	pthread_mutex_lock(&m_mutex);		while (m_conditionnedVar != value)		pthread_cond_wait(&m_cond, &m_mutex);}void ConditionImpl::release(void){	pthread_mutex_unlock(&m_mutex);}void ConditionImpl::signal(void){	pthread_cond_signal(&m_cond);}