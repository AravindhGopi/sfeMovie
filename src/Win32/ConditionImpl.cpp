#include "ConditionImpl.h"#include <iostream>ConditionImpl::ConditionImpl(int& var) :m_conditionnedVar(var),m_mutex(){	m_cond = CreateEvent(NULL, FALSE, FALSE, NULL);}ConditionImpl::~ConditionImpl(void){}void ConditionImpl::waitAndRetain(int value){	m_mutex.Lock();	std::cerr << "locked " << &m_mutex << "\n";		while (m_conditionnedVar != value)		WaitForSingleObject(m_cond, INFINITE);}void ConditionImpl::release(void){	m_mutex.Unlock();	std::cerr << "unlocked " << &m_mutex << " \n";}void ConditionImpl::setValue(int value){	m_conditionnedVar = value;	signal();}void ConditionImpl::signal(void){	SetEvent(m_cond);}